buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.0-SNAPSHOT'
    }
}

apply plugin: "maven"
apply plugin: 'net.minecraftforge.gradle.forge'

group = "codechicken" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "CodeChickenLib"

// Define properties file
ext.configFile = file "build.properties"

configFile.withReader {
    // Load config.  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version =  "${project.config.mod_version}." + System.getenv("BUILD_NUMBER") ?: "1"

println  config.minecraft_version + "-" + config.forge_version
// Setup the forge minecraft plugin data. Specify the preferred forge/minecraft version here
minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    mappings = "snapshot_nodoc_20150918"
    runDir = 'eclipse'
}

sourceSets {
	main {
        def root = project.projectDir.parentFile
        java {
            srcDir new File(root, "src")
        }
        resources {
            srcDir new File(root, "resources")
        }
	}
}

processResources {
    // Move access transformer to META-INF
    rename '(.+_at.cfg)', 'META-INF/$1'
}

version = "${project.minecraft.version}-${project.version}"
def commonManifest = {
    attributes 'Main-Class': 'codechicken.lib.tool.Main'
    attributes 'FMLCorePlugin': 'codechicken.lib.asm.CCLCorePlugin'
    attributes 'FMLAT': 'ccl_at.cfg'
}

jar {
    classifier = 'universal'
    manifest commonManifest
}

task sourcesJar(type: Jar) {
    from sourceSets.main.java
    classifier = 'src'
}

task devJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
    manifest commonManifest
}

// Tell the artifact system about our extra jars
artifacts {
	archives sourcesJar, devJar
}

// Configure an upload task. this is setup for uploading to files.minecraftforge.net. There are other examples around
uploadArchives {
    dependsOn 'reobf'
    repositories {
        if (project.hasProperty("filesmaven")) {
            logger.info('Publishing to files server')
            
            mavenDeployer {
                configuration = configurations.deployJars

                repository(url: project.filesmaven.url) {
                    authentication(userName: project.filesmaven.username, privateKey: project.filesmaven.key)
                }

                // This is just the pom data for the maven repo
                pom {
                    groupId = project.group
                    // Force the maven upload to use the <mcversion>-<version> syntax preferred at files
                    artifactId = project.archivesBaseName
                    project {
                        name project.archivesBaseName
                        packaging 'jar'
                        description 'CodeChickenLib'
                        url 'https://github.com/Chicken-Bones/CodeChickenLib'

                        scm {
                            url 'https://github.com/Chicken-Bones/CodeChickenLib'
                            connection 'scm:git:git://github.com/Chicken-Bones/CodeChickenLib.git'
                            developerConnection 'scm:git:git@github.com:Chicken-Bones/CodeChickenLib.git'
                        }

                        issueManagement {
                            system 'github'
                            url 'https://github.com/Chicken-Bones/CodeChickenLib/issues'
                        }

                        licenses {
                            license {
                                name 'GNU Lesser Public License (GPL), Version 2.1'
                                url 'https://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id 'chicken-bones'
                                name 'chicken-bones'
                                roles { role 'developer' }
                            }
                        }
                    }
                }
            }
        } else {
            logger.info('Publishing to repo folder')
            
            mavenDeployer {
                pom.version = "${project.minecraft.version}-${project.version}"
                repository(url: 'file://localhost/' + project.file('repo').getAbsolutePath())
            }
        }
    }
}